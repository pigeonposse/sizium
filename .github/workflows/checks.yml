###############################################################################
# RELEASE
###############################################################################

name: ‚úÖ Tests and check for updates

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  GITHUB_TOKEN: ${{ github.token }}
  NPM_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
  LIB_ID: "@sizium/core"
permissions:
  contents: write # to create release (changesets/action)
  pull-requests: write # to create pull request (changesets/action)
  issues: write # to post issue comments (changesets/action
  id-token: write # to use OpenID Connect token for provenance (changesets/action)
  actions: write 

###############################################################################
# JOBS
###############################################################################

jobs:
  checks:
    runs-on: 'macos-14' # this is arm64 and we needed for build bins
    steps:

      #########################################################################
      # INIT
      #########################################################################

      - name: ‚¨áÔ∏èüõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
      - name: ‚¨áÔ∏èüõé Checkout
        uses: actions/checkout@v4
      - name: ‚¨áÔ∏èü•° Install pnpm
        uses: pnpm/action-setup@v4
      - name: ‚¨áÔ∏èüü¢ Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
          cache: 'pnpm'

      - name: üêôüò∫ Check GitHub API Rate Limit
        id: rate_limit
        run: |
          response=$(gh api rate_limit)
          limit=$(echo $response | jq -r '.resources.core.limit')
          remaining=$(echo $response | jq -r '.resources.core.remaining')
          echo "GitHub API Rate Limit: $remaining/$limit"

          if [ "$remaining" -lt 10 ]; then
              exit 1
          fi
        env:
            GH_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: ‚¨áÔ∏èüì¶ Install dependencies
        run: |
           export npm_config_build_from_source=false
           pnpm install --no-frozen-lockfile --ignore-scripts

      # Playwright binaries
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$( node -e "console.log(require('./package.json').devDependencies['@playwright/test'])" )" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: ‚¨áÔ∏èüåê Install Playwright Browsers
        run: pnpx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      #########################################################################
      # BUILD
      #########################################################################

      - name: üèó Build packages
        run: pnpm build && pnpm build:bin

      #########################################################################
      # TEST
      #########################################################################

      - name: ‚úÖ Run tests (e2e, unit...)
        run: pnpm test

      #########################################################################
      # EXIT IF IS PULL REQUEST
      #########################################################################

      - name: üö™ Exit here if is pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "Pull request detected, exiting..."
          exit 0
        env:
          GITHUB_TOKEN: ${{env.GITHUB_TOKEN }}

      #########################################################################
      #########################################################################
      # UPDATE VERSIONS
      #########################################################################
      #########################################################################

      - name: üì£ Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          title: "chore(release): version packages ü¶ã"
          version: pnpm . pkg version --silent
          publish: pnpm . pkg publish --silent
          commit: "chore(release): version packages ü¶ã [skip ci]"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ env.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Get updated versions if exists
        id: updated
        run: |
          core_version=$(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | select(.name == "${{env.LIB_ID}}") | .version')
          core_version_major=${core_version%%.*}
          echo Set changesets outputs
          echo '${{ toJSON(steps.changesets.outputs) }}'
          echo Set updated versions
          echo "core_version=$core_version" >> $GITHUB_OUTPUT
          echo "core_version_major=$core_version_major" >> $GITHUB_OUTPUT

      #########################################################################
      # ADD RELEASE TAG
      #########################################################################
      - name: Add core version TAG to Github
        if: steps.updated.outputs.core_version != ''
        uses: richardsimko/update-tag@v1
        with:
          tag_name: ${{steps.updated.outputs.core_version}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #########################################################################
      # UPDATE REPO INFO
      #########################################################################
      - name: ‚ÑπÔ∏è‚û°Ô∏è Check for changes in package.json
        run: |
          git fetch origin main
          git diff --name-only HEAD origin/main | grep 'package.json' || echo "No changes in package.json"
        continue-on-error: true
        id: check_package_json
      - name: ‚ÑπÔ∏èüêôüò∫‚û°Ô∏è Update repo info
        if: steps.check_package_json.outputs.stdout != 'No changes in package.json'
        run: pnpm . gh info update
        continue-on-error: true

      #########################################################################
      # DOCS
      #########################################################################

      - name: üìöüêôüò∫‚û°Ô∏è Call to workflow for deploy Documentation
        if: steps.updated.outputs.core_version != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: release-docs.yml
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      #########################################################################
      # WEB
      #########################################################################

      - name: üìöüêôüò∫‚û°Ô∏è Call to workflow for deploy Web
        if: steps.updated.outputs.core_version != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: release-web.yml
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      #########################################################################
      # EXECUTABLES
      #########################################################################
      - name: Release binaries
        uses: ncipollo/release-action@v1
        if: steps.updated.outputs.core_version != ''
        with: 
          tag: "${{ steps.updated.outputs.core_version }}"
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: "./packages/cli/build/compress/*.zip"
        #   body: |
        #     ${{steps.pkg.outputs.release_body}}
          omitBodyDuringUpdate: true

###############################################################################
